/**
 * Type definitions for domain models.
 * These interfaces define the structure of domain objects and can be used for type checking.
 */

/**
 * Represents a professional role that an AI can adopt.
 */
export interface IRole {
  readonly id: string;
  readonly name: string;
  readonly description: string;
  readonly responsibilities: readonly string[];
  readonly expertise: readonly string[];
  
  /**
   * Generates a prompt for the AI to adopt this role.
   * @param context The specific context or problem to address
   * @returns A formatted prompt string
   */
  generatePrompt(context: string): string;
}

/**
 * Represents a scenario or problem that can be addressed by different roles.
 */
export interface IScenario {
  readonly id: string;
  readonly title: string;
  readonly description: string;
  readonly category: string;
  readonly complexity: 'low' | 'medium' | 'high';
  readonly suggestedRoles: readonly string[];
  
  /**
   * Checks if a role is suggested for this scenario.
   * @param roleName The name of the role to check
   * @returns True if the role is suggested for this scenario, false otherwise
   */
  isSuggestedRole(roleName: string): boolean;
}

/**
 * Represents a response generated by a role-based prompt.
 */
export interface IRoleResponse {
  readonly roleId: string;
  readonly roleName: string;
  readonly context: string;
  readonly analysis: string;
  readonly recommendations: readonly string[];
  readonly nextSteps: readonly string[];
  readonly codeExamples: readonly string[];
  
  /**
   * Converts the response to a JSON-serializable object.
   * @returns A plain object representation of the response
   */
  toJSON(): Record<string, unknown>;
}

/**
 * Validation errors for domain models.
 */
export interface ValidationError {
  field: string;
  message: string;
}

/**
 * Result of a validation operation.
 */
export interface ValidationResult {
  valid: boolean;
  errors: ValidationError[];
}
